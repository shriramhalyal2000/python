Perfect 🔥
Pattern printing problems are the **best way** to master **nested loops** and sharpen logic for interviews.
Let’s go step-by-step from **basic to complex** — with **clear explanations + code + output**.

We’ll use only **Python `for` loops**, **`range()`**, and **nested loops**.

---

## 🧩 LEVEL 1 — Basic Star Patterns

### ⭐ Pattern 1: Simple right triangle

```
*
**
***
****
*****
```

```python
rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print("*", end="")
    print()
```

---

### ⭐ Pattern 2: Inverted right triangle

```
*****
****
***
**
*
```

```python
rows = 5
for i in range(rows, 0, -1):
    for j in range(i):
        print("*", end="")
    print()
```

---

### ⭐ Pattern 3: Right-aligned triangle

```
    *
   **
  ***
 ****
*****
```

```python
rows = 5
for i in range(1, rows + 1):
    print(" " * (rows - i) + "*" * i)
```

---

### ⭐ Pattern 4: Pyramid

```
    *
   ***
  *****
 *******
*********
```

```python
rows = 5
for i in range(1, rows + 1):
    spaces = rows - i
    stars = 2 * i - 1
    print(" " * spaces + "*" * stars)
```

---

### ⭐ Pattern 5: Inverted Pyramid

```
*********
 *******
  *****
   ***
    *
```

```python
rows = 5
for i in range(rows, 0, -1):
    spaces = rows - i
    stars = 2 * i - 1
    print(" " * spaces + "*" * stars)
```

---

## 🧮 LEVEL 2 — Number Patterns

### 🔢 Pattern 6: Increasing numbers

```
1
12
123
1234
12345
```

```python
rows = 5
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(j, end="")
    print()
```

---

### 🔢 Pattern 7: Repeated row numbers

```
1
22
333
4444
55555
```

```python
rows = 5
for i in range(1, rows + 1):
    for j in range(i):
        print(i, end="")
    print()
```

---

### 🔢 Pattern 8: Continuous numbering

```
1
23
456
78910
```

```python
num = 1
for i in range(1, 5):
    for j in range(i):
        print(num, end="")
        num += 1
    print()
```

---

## 🔠 LEVEL 3 — Alphabet Patterns

### 🅰️ Pattern 9: Alphabet triangle

```
A
AB
ABC
ABCD
ABCDE
```

```python
rows = 5
for i in range(rows):
    for j in range(i + 1):
        print(chr(65 + j), end="")
    print()
```

---

### 🅱️ Pattern 10: Alphabet reverse pyramid

```
ABCDE
ABCD
ABC
AB
A
```

```python
rows = 5
for i in range(rows, 0, -1):
    for j in range(i):
        print(chr(65 + j), end="")
    print()
```

---

## 💫 LEVEL 4 — Advanced Nested Patterns

### 🔷 Pattern 11: Diamond Shape

```
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
```

```python
rows = 5

# Upper half
for i in range(1, rows + 1):
    print(" " * (rows - i) + "*" * (2 * i - 1))

# Lower half
for i in range(rows - 1, 0, -1):
    print(" " * (rows - i) + "*" * (2 * i - 1))
```

---

### 🔷 Pattern 12: Hollow Square

```
*****
*   *
*   *
*   *
*****
```

```python
rows = 5
for i in range(rows):
    for j in range(rows):
        if i == 0 or i == rows - 1 or j == 0 or j == rows - 1:
            print("*", end="")
        else:
            print(" ", end="")
    print()
```

---

### 🔷 Pattern 13: Hollow Pyramid

```
    *
   * *
  *   *
 *     *
*********
```

```python
rows = 5
for i in range(1, rows + 1):
    for j in range(1, 2 * rows):
        if j == rows - i + 1 or j == rows + i - 1 or i == rows:
            print("*", end="")
        else:
            print(" ", end="")
    print()
```

---

### 🔷 Pattern 14: Hourglass / Sandglass Pattern

```
*********
 *******
  *****
   ***
    *
   ***
  *****
 *******
*********
```

```python
rows = 5

# Top half
for i in range(rows, 0, -1):
    print(" " * (rows - i) + "*" * (2 * i - 1))

# Bottom half
for i in range(2, rows + 1):
    print(" " * (rows - i) + "*" * (2 * i - 1))
```

---

### 🔷 Pattern 15: Pascal’s Triangle

```
      1
     1 1
    1 2 1
   1 3 3 1
  1 4 6 4 1
```

```python
rows = 5
for i in range(rows):
    print(" " * (rows - i), end="")
    num = 1
    for j in range(i + 1):
        print(num, end=" ")
        num = num * (i - j) // (j + 1)
    print()
```

---

## 🎯 Bonus — Mixed Logic Challenges

| # | Challenge                                                | Hint                                 |
| - | -------------------------------------------------------- | ------------------------------------ |
| 1 | Print a checkerboard pattern (`*` and space alternately) | use `(i+j)%2`                        |
| 2 | Print an X pattern                                       | `if i==j or i+j==n-1`                |
| 3 | Hollow diamond                                           | combine upper/lower hollow triangles |
| 4 | Numeric diamond                                          | print mirrored numbers               |
| 5 | Letter diamond (A center pyramid)                        | mix chr(65+i) with pyramid logic     |

---

Would you like me to:

1. 📘 **Generate a “Pattern Practice Workbook (.py)”** — all these 15+ patterns with placeholders for you to fill in logic (for self-practice),
   or
2. 🎯 **Go even deeper into “complex number/alphabet hybrid patterns”** (like mirrored pyramids, palindromic patterns, hourglass numbers, etc.)?
